The ``1-my_list`` module Test

This library has tests for ``MyList`` class that inherits from
``list`` class and have instance method ``print_sorted``

Make Sure Documentation Exists:
Checking for module docstring:
>>> m = __import__("1-my_list").__doc__
>>> len(m) > 1
True

Checking for class docstring:
>>> c = __import__("1-my_list").MyList.__doc__
>>> len(c) > 1
True

Checking for class function (method) docstring:
>>> f = __import__("1-my_list").MyList.print_sorted.__doc__
>>> len(f) > 1
True

Importing class from the module:
>>> MyList = __import__('1-my_list').MyList

case 1: common case
create a `list` and add elements by using `append`,
then call `print_sorted` to return a new list
>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list.print_sorted()
[]
>>> my_list.append(1)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(4)
>>> my_list.append(2)
>>> print(my_list)
[1, 3, 5, 4, 2]

Print the list in sorted order
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

Ensure the original list has not changed
>>> print(my_list)
[1, 3, 5, 4, 2]
>>>

case 2: not defined object
>>> MyList = __import__('1-my_list').MyList
>>> my_list2.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_list2' is not defined

Checking for NULL, NaN and None Objects
>>> my_list = MyList()
>>> my_list.append(NULL)
Traceback (most recent call last):
...
NameError: name 'NULL' is not defined
>>> my_list.append(NaN)
Traceback (most recent call last):
...
NameError: name 'NaN' is not defined
>>> my_list.append(None)
>>> my_list
[None]

case 3: passed a list
list of positive int with calling print_sorted method
>>> a = [1, 9, 4]
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[1, 4, 9]
>>>

case 4: empty list
Empty list with calling print_sorted
>>> a = []
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[]
>>>

case 5: unique number
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.print_sorted()
[1]
>>> print(my_list)
[1]
>>>

case 6: same number
>>> my_list2 = MyList()
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.print_sorted()
[1, 1, 1, 1]
>>>

case 7: parent object
>>> my_list = [1, 2, 3]
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'print_sorted'
>>>

case 8: negative numbers
list of negative int with calling print_sorted method
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(51)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -1, 1, 5, 51]
>>>

case 9: passed a string
>>> my_list = MyList("hello")
>>> my_list
['h', 'e', 'l', 'l', 'o']
>>> my_list.print_sorted()
['e', 'h', 'l', 'l', 'o']

case 10: print list without calling print_sorted method
>>> mylist = MyList([1, 8, 4])
>>> mylist
[1, 8, 4]

case 11: test if `MyList` is subClass and instance of `list`
>>> issubclass(MyList, list)
True
>>> mylist = MyList()
>>> isinstance(mylist, list)
True

case 12: perform slicing
>>> my_list = MyList([19, 33, 19, -47, 0, -8])
>>> my_list[-3:]
[-47, 0, -8]
>>> my_list[:2]
[19, 33]
>>> my_list[1:4]
[33, 19, -47]
>>> my_list[:5:2]
[19, 19, 0]
>>> my_list[::-1]
[-8, 0, -47, 19, 33, 19]

case 13: concat, modify and pop, print,
sort with `.print_sorted()` and `.sort()`,
delete with `del` keyword, count element
with `.count()`, insert at an index with
`.insert()`
>>> my_list = MyList([19, 33, 19, -47, 0, -8])
>>> my_1_list = my_list + [-42, 15, -79]
>>> my_1_list
[19, 33, 19, -47, 0, -8, -42, 15, -79]
>>> my_1_list[-2] = 51
>>> my_1_list
[19, 33, 19, -47, 0, -8, -42, 51, -79]
>>> my_1_list.pop()
-79
>>> my_1_list
[19, 33, 19, -47, 0, -8, -42, 51]
>>> my_1_list = MyList([19, 33, 19, -47, 0, -8, -42, 51])
>>> my_1_list.print_sorted()
[-47, -42, -8, 0, 19, 19, 33, 51]
>>> my_1_list.sort()
>>> my_1_list
[-47, -42, -8, 0, 19, 19, 33, 51]
>>> del my_1_list[-2]
>>> my_1_list
[-47, -42, -8, 0, 19, 19, 51]
>>> my_1_list.count(19)
2
>>> my_1_list.count(33)
0
>>> my_1_list.count(-8)
1
>>> my_list = MyList(3)
Traceback (most recent call last):
...
TypeError: 'int' object is not iterable
>>> my_1_list = [-47, -42, -8, 0, 19, 19, 51]
>>> my_list = MyList(my_1_list)
>>> my_list.insert(3, 33)
>>> my_list
[-47, -42, -8, 33, 0, 19, 19, 51]
>>> my_list.print_sorted()
[-47, -42, -8, 0, 19, 19, 33, 51]

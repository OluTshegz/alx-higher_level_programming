# Test cases for 'print_square' function in "4-print_square" file module

Test cases for/on How to Use 4-print_square.py module
This module defines a square-printing function ``print_square(size)``.

Usage
=====
``print_square(...)`` prints a square using the ``#`` character.
The parameter ``size`` represents the height and width of the square.

::
    Make Sure Documentation Exists:
    Checking for module docstring:
    >>> module_documentation = __import__("4-print_square").__doc__
    >>> len(module_documentation) > 1
    True

    Checking for function docstring:
    >>> function_documentation = __import__("4-print_square").print_square.__doc__
    >>> len(function_documentation) > 1
    True

    Importing function from the module:
    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

    >>> print_square(7)
    #######
    #######
    #######
    #######
    #######
    #######
    #######

    If ``size`` is zero, the function prints nothing.
    >>> print_square(0)

    At least one argument must be provided.
    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'


    If ``size`` is a float, a TypeError is raised.
    # size is a float
    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

    If ``size`` is less than zero, a ValueError is raised.
    # size is less than zero
    >>> print_square(-3)
    Traceback (most recent call last):
    ValueError: size must be >= 0

    Note that type-checking occurs before value-checking.
    # size is a float and less than zero
    >>> print_square(-4.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

    # size is a non-integer
    >>> print_square("5")
    Traceback (most recent call last):
    TypeError: size must be an integer

    # a string is type casted to an integer which is valid
    >>> print_square(int("5"))
    #####
    #####
    #####
    #####
    #####

    # try converting a string containing a float number to integer
    >>> print_square(int("1.3"))
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: '1.3'

    # try using a sequence
    print_square([1, 2, 3])
    Traceback (most recent call last):
    TypeError: size must be an integer

    # try with an infinite number
    >>> print_square(float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    # Traceback (most recent call last):
    # OverflowError: cannot convert float infinity to integer

    # try with a NaN type
    >>> print_square(float('nan'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    # Traceback (most recent call last):
    # ValueError: cannot convert float NaN to integer

    The parameter ``size`` must be an integer. Otherwise, a TypeError is raised.
    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

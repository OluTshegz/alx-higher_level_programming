# Test cases for 'say_my_name' function in "3-say_my_name" file module

Test cases for/on How to Use 3-say_my_name.py module
This modules defines a function ``say_my_name(first_name, last_name="")``.

Usage
=====
``say_my_name(...)`` prints "My name is <first_name> <last_name>".

::
    Make Sure Documentation Exists:
    Checking for module docstring:
    >>> module_documentation = __import__("3-say_my_name").__doc__
    >>> len(module_documentation) > 1
    True

    Checking for function docstring:
    >>> function_documentation = __import__("3-say_my_name").say_my_name.__doc__
    >>> len(function_documentation) > 1
    True

    Importing function from the module:
    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Olusegun", "Tayo")
    My name is Olusegun Tayo

    >>> say_my_name("Anna Maria", "Mary Jane")
    My name is Anna Maria Mary Jane

    # The parameter ```last_name``` is optional.
    # If no last name is provided,
    # an empty string is printed instead.
    >>> say_my_name("John-Paul")
    My name is John-Paul 

    Checking for 1 arg:
    >>> say_my_name("Hello")
    My name is Hello 

    >>> say_my_name(6, "James")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("MeCalister", ["Cavs", "Bakers", "Heat"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name({"LeBron": 6, "Lames": 23}, 7.7)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    At least one name must be provided.
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

    Checking for normal use:
    >>> say_my_name("Hello", "World")
    My name is Hello World
    >>> say_my_name("You know nothing", "John Snow")
    My name is You know nothing John Snow

    Checking for passing None as first name:
    >>> say_my_name(None, "Hello")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    Checking for passing None as last name:
    >>> say_my_name("Hello", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    # Invalid argument types
    >>> say_my_name(7739)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    Checking for more than 2 args:
    >>> say_my_name("Hello", "World", "hi")
    Traceback (most recent call last):
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

    # Test for when the user really wants their name to
    # be something other than a 'normal' string
    >>> say_my_name(str(56), "Street")
    My name is 56 Street
    >>> say_my_name(str(['I', 'prefer', 'lists']), "in Python")
    My name is ['I', 'prefer', 'lists'] in Python
    >>> say_my_name("&@&", "()")
    My name is &@& ()

    >>> say_my_name("")
    My name is  
    >>> say_my_name("", "")
    My name is  
    >>> say_my_name(" ")
    My name is   
    >>> say_my_name(" ", " ")
    My name is    

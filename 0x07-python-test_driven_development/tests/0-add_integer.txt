# Test cases for 'add_integer' function in "0-add_integer" file module

Test cases for/on How to Use 0-add_integer.py module
This module defines a integer addition function ``add_integer(a, b=98)``.

Usage
=====
``add_integer(...)`` takes two integers or floats as arguments and returns their sum.

Make Sure Documentation Exists:
Checking for module docstring:
    >>> module_documentation = __import__("0-add_integer").__doc__
    >>> len(module_documentation) > 1
    True

Checking for function docstring:
    >>> function_documentation = __import__("0-add_integer").add_integer.__doc__
    >>> len(function_documentation) > 1
    True

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 3 and b = 7)
    >>> add_integer(3, 7)
    10

Adding one positive and one negative integer (a = 5 and b = -2)
    >>> add_integer(5, -2)
    3

Adding two negative integers (a = -4 and b = -6)
    >>> add_integer(-4, -6)
    -10

Adding two integers with the second being the same as the default value of b (a = 1 and b = 98)
    >>> add_integer(1)
    99

Adding a positive float and a positive integer (a = 8.9 and b = 9)
    >>> add_integer(8.9, 9)
    17

Adding a float and an integer where the integer is equal to the default value of b (a = 9.8 and b = 98)
    >>> add_integer(9.8)
    107

Adding a positive float and a negative integer (a = 8.1 and b = -9)
	    >>> add_integer(8.1, -9)
	    -1

Adding two negative floats (a = -1.9 and b = -8)
	    >>> add_integer(-1.9, -8)
	    -9

Adding an integer number and a string (a = 5 and b = "Holberton")
    >>> add_integer(5, "Holberton")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a letter and a number (a = 'z' and b = 5)
    >>> add_integer('z', 5)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters (a = 'n' and b = 'o')
    >>> add_integer('n', 'o')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((3, 7))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(235, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing only one string
    >>> add_integer("Alx")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two float numbers (a = 1.2 and b = 4.2)
    >>> add_integer(3.7, 5.2)
    8

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
